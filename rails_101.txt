# Setup new rails application without default test directory (so RSpec can be used)

rails new <app_name> --skip-test-unit


# Edit the Gemfile to include gems (currently) needed, then update actual gems

bundle update
bundle install --without production (remembered option so bundle install from now on)


# Install RSpec in place of Test::Unit

rails generate rspec:install


# Setup git repo

git init
git add .
git commit -m "Initial commit"


# Update README to .md format

subl README.rdoc
git mv README.rdoc README.md
git commit -am "Improve the README"


# Create new repo at GitHub and push to it

git remote add origin git@github.com:ash106/<repo_name>.git
git push -u origin master


# Deploy to Heroku

heroku create
rake assets:precompile
git commit -am "Add precompiled assets for Heroku"
git push heroku master


# Push and deploy the app (use regularly)

git push
git push heroku


# Add spork to speed up RSpec testing

Add these lines to Gemfile:
  gem 'guard-spork', '1.2.0'
  gem 'childprocess', '0.3.6'
  gem 'spork', '0.9.2'
bundle update
bundle install


# Bootstrap the Spork configuration (?)

bundle exec spork --bootstrap


# Edit spec/spec_helper.rb

Move environment code into prefork (Listing 3.36)
"spork" can now be used as a command
Add "--drb" to .rspec file in root dir


# Create static_pages controller

git checkout -b static-pages
rails generate controller StaticPages home --no-test-framework
git add .
git commit -m "Add a StaticPages controller"


# Create RSpec request for static_pages

rails generate integration_test static_pages
Add code to spec/requests/static_pages_spec.rb (Listing 3.9)
Edit the app/views/static_pages/home.html.erb page to satisfy test requirements
Edit the app/views/layouts/application.html.erb page to satisfy test reqs
Repeat previous three steps as needed


# Commit static homepage changes, merge branch, and push to GitHub and Heroku